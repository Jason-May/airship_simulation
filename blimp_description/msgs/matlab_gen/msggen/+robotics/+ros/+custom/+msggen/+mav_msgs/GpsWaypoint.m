classdef GpsWaypoint < robotics.ros.Message
    %GpsWaypoint MATLAB implementation of mav_msgs/GpsWaypoint
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mav_msgs/GpsWaypoint' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '61c3751c96f3b418f93879727f9a070a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Latitude
        Longitude
        Altitude
        Heading
        MaxSpeed
        MaxAcc
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Altitude', 'Header', 'Heading', 'Latitude', 'Longitude', 'MaxAcc', 'MaxSpeed'} % List of non-constant message properties
        ROSPropertyList = {'altitude', 'header', 'heading', 'latitude', 'longitude', 'maxAcc', 'maxSpeed'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GpsWaypoint(msg)
            %GpsWaypoint Construct the message object GpsWaypoint
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'GpsWaypoint', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'GpsWaypoint', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'GpsWaypoint', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = double(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'GpsWaypoint', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function heading = get.Heading(obj)
            %get.Heading Get the value for property Heading
            heading = double(obj.JavaMessage.getHeading);
        end
        
        function set.Heading(obj, heading)
            %set.Heading Set the value for property Heading
            validateattributes(heading, {'numeric'}, {'nonempty', 'scalar'}, 'GpsWaypoint', 'Heading');
            
            obj.JavaMessage.setHeading(heading);
        end
        
        function maxspeed = get.MaxSpeed(obj)
            %get.MaxSpeed Get the value for property MaxSpeed
            maxspeed = double(obj.JavaMessage.getMaxSpeed);
        end
        
        function set.MaxSpeed(obj, maxspeed)
            %set.MaxSpeed Set the value for property MaxSpeed
            validateattributes(maxspeed, {'numeric'}, {'nonempty', 'scalar'}, 'GpsWaypoint', 'MaxSpeed');
            
            obj.JavaMessage.setMaxSpeed(maxspeed);
        end
        
        function maxacc = get.MaxAcc(obj)
            %get.MaxAcc Get the value for property MaxAcc
            maxacc = double(obj.JavaMessage.getMaxAcc);
        end
        
        function set.MaxAcc(obj, maxacc)
            %set.MaxAcc Set the value for property MaxAcc
            validateattributes(maxacc, {'numeric'}, {'nonempty', 'scalar'}, 'GpsWaypoint', 'MaxAcc');
            
            obj.JavaMessage.setMaxAcc(maxacc);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.Heading = obj.Heading;
            cpObj.MaxSpeed = obj.MaxSpeed;
            cpObj.MaxAcc = obj.MaxAcc;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.Heading = strObj.Heading;
            obj.MaxSpeed = strObj.MaxSpeed;
            obj.MaxAcc = strObj.MaxAcc;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.Heading = obj.Heading;
            strObj.MaxSpeed = obj.MaxSpeed;
            strObj.MaxAcc = obj.MaxAcc;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mav_msgs.GpsWaypoint.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mav_msgs.GpsWaypoint;
            obj.reload(strObj);
        end
    end
end
