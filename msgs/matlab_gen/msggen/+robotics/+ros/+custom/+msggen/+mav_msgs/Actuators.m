classdef Actuators < robotics.ros.Message
    %Actuators MATLAB implementation of mav_msgs/Actuators
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mav_msgs/Actuators' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '25741daf38ed25442e3a66a855ee8d9c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Angles
        AngularVelocities
        Normalized
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Angles', 'AngularVelocities', 'Header', 'Normalized'} % List of non-constant message properties
        ROSPropertyList = {'angles', 'angular_velocities', 'header', 'normalized'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Actuators(msg)
            %Actuators Construct the message object Actuators
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Actuators', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function angles = get.Angles(obj)
            %get.Angles Get the value for property Angles
            javaArray = obj.JavaMessage.getAngles;
            array = obj.readJavaArray(javaArray, 'double');
            angles = double(array);
        end
        
        function set.Angles(obj, angles)
            %set.Angles Set the value for property Angles
            if ~isvector(angles) && isempty(angles)
                % Allow empty [] input
                angles = double.empty(0,1);
            end
            
            validateattributes(angles, {'numeric'}, {'vector'}, 'Actuators', 'Angles');
            
            javaArray = obj.JavaMessage.getAngles;
            array = obj.writeJavaArray(angles, javaArray, 'double');
            obj.JavaMessage.setAngles(array);
        end
        
        function angularvelocities = get.AngularVelocities(obj)
            %get.AngularVelocities Get the value for property AngularVelocities
            javaArray = obj.JavaMessage.getAngularVelocities;
            array = obj.readJavaArray(javaArray, 'double');
            angularvelocities = double(array);
        end
        
        function set.AngularVelocities(obj, angularvelocities)
            %set.AngularVelocities Set the value for property AngularVelocities
            if ~isvector(angularvelocities) && isempty(angularvelocities)
                % Allow empty [] input
                angularvelocities = double.empty(0,1);
            end
            
            validateattributes(angularvelocities, {'numeric'}, {'vector'}, 'Actuators', 'AngularVelocities');
            
            javaArray = obj.JavaMessage.getAngularVelocities;
            array = obj.writeJavaArray(angularvelocities, javaArray, 'double');
            obj.JavaMessage.setAngularVelocities(array);
        end
        
        function normalized = get.Normalized(obj)
            %get.Normalized Get the value for property Normalized
            javaArray = obj.JavaMessage.getNormalized;
            array = obj.readJavaArray(javaArray, 'double');
            normalized = double(array);
        end
        
        function set.Normalized(obj, normalized)
            %set.Normalized Set the value for property Normalized
            if ~isvector(normalized) && isempty(normalized)
                % Allow empty [] input
                normalized = double.empty(0,1);
            end
            
            validateattributes(normalized, {'numeric'}, {'vector'}, 'Actuators', 'Normalized');
            
            javaArray = obj.JavaMessage.getNormalized;
            array = obj.writeJavaArray(normalized, javaArray, 'double');
            obj.JavaMessage.setNormalized(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Angles = obj.Angles;
            cpObj.AngularVelocities = obj.AngularVelocities;
            cpObj.Normalized = obj.Normalized;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Angles = strObj.Angles;
            obj.AngularVelocities = strObj.AngularVelocities;
            obj.Normalized = strObj.Normalized;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Angles = obj.Angles;
            strObj.AngularVelocities = obj.AngularVelocities;
            strObj.Normalized = obj.Normalized;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mav_msgs.Actuators.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mav_msgs.Actuators;
            obj.reload(strObj);
        end
    end
end
