classdef Status < robotics.ros.Message
    %Status MATLAB implementation of mav_msgs/Status
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mav_msgs/Status' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e191265664a5f7c1871338dc13be0958' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        RCCOMMANDATTITUDE = '"attitude_thrust"'
        RCCOMMANDATTITUDEHEIGHT = '"attitude_height"'
        RCCOMMANDPOSITION = '"position"'
        MOTORSTATUSRUNNING = '"running"'
        MOTORSTATUSSTOPPED = '"stopped"'
        MOTORSTATUSSTARTING = '"starting"'
        MOTORSTATUSSTOPPING = '"stopping"'
        GPSSTATUSLOCK = '"lock"'
        GPSSTATUSNOLOCK = '"no_lock"'
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        VehicleName
        VehicleType
        BatteryVoltage
        RcCommandMode
        CommandInterfaceEnabled
        FlightTime
        SystemUptime
        CpuLoad
        MotorStatus
        InAir
        GpsStatus
        GpsNumSatellites
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BatteryVoltage', 'CommandInterfaceEnabled', 'CpuLoad', 'FlightTime', 'GpsNumSatellites', 'GpsStatus', 'Header', 'InAir', 'MotorStatus', 'RcCommandMode', 'SystemUptime', 'VehicleName', 'VehicleType'} % List of non-constant message properties
        ROSPropertyList = {'battery_voltage', 'command_interface_enabled', 'cpu_load', 'flight_time', 'gps_num_satellites', 'gps_status', 'header', 'in_air', 'motor_status', 'rc_command_mode', 'system_uptime', 'vehicle_name', 'vehicle_type'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Status(msg)
            %Status Construct the message object Status
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Status', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function vehiclename = get.VehicleName(obj)
            %get.VehicleName Get the value for property VehicleName
            vehiclename = char(obj.JavaMessage.getVehicleName);
        end
        
        function set.VehicleName(obj, vehiclename)
            %set.VehicleName Set the value for property VehicleName
            vehiclename = convertStringsToChars(vehiclename);
            
            validateattributes(vehiclename, {'char', 'string'}, {}, 'Status', 'VehicleName');
            
            obj.JavaMessage.setVehicleName(vehiclename);
        end
        
        function vehicletype = get.VehicleType(obj)
            %get.VehicleType Get the value for property VehicleType
            vehicletype = char(obj.JavaMessage.getVehicleType);
        end
        
        function set.VehicleType(obj, vehicletype)
            %set.VehicleType Set the value for property VehicleType
            vehicletype = convertStringsToChars(vehicletype);
            
            validateattributes(vehicletype, {'char', 'string'}, {}, 'Status', 'VehicleType');
            
            obj.JavaMessage.setVehicleType(vehicletype);
        end
        
        function batteryvoltage = get.BatteryVoltage(obj)
            %get.BatteryVoltage Get the value for property BatteryVoltage
            batteryvoltage = single(obj.JavaMessage.getBatteryVoltage);
        end
        
        function set.BatteryVoltage(obj, batteryvoltage)
            %set.BatteryVoltage Set the value for property BatteryVoltage
            validateattributes(batteryvoltage, {'numeric'}, {'nonempty', 'scalar'}, 'Status', 'BatteryVoltage');
            
            obj.JavaMessage.setBatteryVoltage(batteryvoltage);
        end
        
        function rccommandmode = get.RcCommandMode(obj)
            %get.RcCommandMode Get the value for property RcCommandMode
            rccommandmode = char(obj.JavaMessage.getRcCommandMode);
        end
        
        function set.RcCommandMode(obj, rccommandmode)
            %set.RcCommandMode Set the value for property RcCommandMode
            rccommandmode = convertStringsToChars(rccommandmode);
            
            validateattributes(rccommandmode, {'char', 'string'}, {}, 'Status', 'RcCommandMode');
            
            obj.JavaMessage.setRcCommandMode(rccommandmode);
        end
        
        function commandinterfaceenabled = get.CommandInterfaceEnabled(obj)
            %get.CommandInterfaceEnabled Get the value for property CommandInterfaceEnabled
            commandinterfaceenabled = logical(obj.JavaMessage.getCommandInterfaceEnabled);
        end
        
        function set.CommandInterfaceEnabled(obj, commandinterfaceenabled)
            %set.CommandInterfaceEnabled Set the value for property CommandInterfaceEnabled
            validateattributes(commandinterfaceenabled, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Status', 'CommandInterfaceEnabled');
            
            obj.JavaMessage.setCommandInterfaceEnabled(commandinterfaceenabled);
        end
        
        function flighttime = get.FlightTime(obj)
            %get.FlightTime Get the value for property FlightTime
            flighttime = single(obj.JavaMessage.getFlightTime);
        end
        
        function set.FlightTime(obj, flighttime)
            %set.FlightTime Set the value for property FlightTime
            validateattributes(flighttime, {'numeric'}, {'nonempty', 'scalar'}, 'Status', 'FlightTime');
            
            obj.JavaMessage.setFlightTime(flighttime);
        end
        
        function systemuptime = get.SystemUptime(obj)
            %get.SystemUptime Get the value for property SystemUptime
            systemuptime = single(obj.JavaMessage.getSystemUptime);
        end
        
        function set.SystemUptime(obj, systemuptime)
            %set.SystemUptime Set the value for property SystemUptime
            validateattributes(systemuptime, {'numeric'}, {'nonempty', 'scalar'}, 'Status', 'SystemUptime');
            
            obj.JavaMessage.setSystemUptime(systemuptime);
        end
        
        function cpuload = get.CpuLoad(obj)
            %get.CpuLoad Get the value for property CpuLoad
            cpuload = single(obj.JavaMessage.getCpuLoad);
        end
        
        function set.CpuLoad(obj, cpuload)
            %set.CpuLoad Set the value for property CpuLoad
            validateattributes(cpuload, {'numeric'}, {'nonempty', 'scalar'}, 'Status', 'CpuLoad');
            
            obj.JavaMessage.setCpuLoad(cpuload);
        end
        
        function motorstatus = get.MotorStatus(obj)
            %get.MotorStatus Get the value for property MotorStatus
            motorstatus = char(obj.JavaMessage.getMotorStatus);
        end
        
        function set.MotorStatus(obj, motorstatus)
            %set.MotorStatus Set the value for property MotorStatus
            motorstatus = convertStringsToChars(motorstatus);
            
            validateattributes(motorstatus, {'char', 'string'}, {}, 'Status', 'MotorStatus');
            
            obj.JavaMessage.setMotorStatus(motorstatus);
        end
        
        function inair = get.InAir(obj)
            %get.InAir Get the value for property InAir
            inair = logical(obj.JavaMessage.getInAir);
        end
        
        function set.InAir(obj, inair)
            %set.InAir Set the value for property InAir
            validateattributes(inair, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Status', 'InAir');
            
            obj.JavaMessage.setInAir(inair);
        end
        
        function gpsstatus = get.GpsStatus(obj)
            %get.GpsStatus Get the value for property GpsStatus
            gpsstatus = char(obj.JavaMessage.getGpsStatus);
        end
        
        function set.GpsStatus(obj, gpsstatus)
            %set.GpsStatus Set the value for property GpsStatus
            gpsstatus = convertStringsToChars(gpsstatus);
            
            validateattributes(gpsstatus, {'char', 'string'}, {}, 'Status', 'GpsStatus');
            
            obj.JavaMessage.setGpsStatus(gpsstatus);
        end
        
        function gpsnumsatellites = get.GpsNumSatellites(obj)
            %get.GpsNumSatellites Get the value for property GpsNumSatellites
            gpsnumsatellites = int32(obj.JavaMessage.getGpsNumSatellites);
        end
        
        function set.GpsNumSatellites(obj, gpsnumsatellites)
            %set.GpsNumSatellites Set the value for property GpsNumSatellites
            validateattributes(gpsnumsatellites, {'numeric'}, {'nonempty', 'scalar'}, 'Status', 'GpsNumSatellites');
            
            obj.JavaMessage.setGpsNumSatellites(gpsnumsatellites);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.VehicleName = obj.VehicleName;
            cpObj.VehicleType = obj.VehicleType;
            cpObj.BatteryVoltage = obj.BatteryVoltage;
            cpObj.RcCommandMode = obj.RcCommandMode;
            cpObj.CommandInterfaceEnabled = obj.CommandInterfaceEnabled;
            cpObj.FlightTime = obj.FlightTime;
            cpObj.SystemUptime = obj.SystemUptime;
            cpObj.CpuLoad = obj.CpuLoad;
            cpObj.MotorStatus = obj.MotorStatus;
            cpObj.InAir = obj.InAir;
            cpObj.GpsStatus = obj.GpsStatus;
            cpObj.GpsNumSatellites = obj.GpsNumSatellites;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.VehicleName = strObj.VehicleName;
            obj.VehicleType = strObj.VehicleType;
            obj.BatteryVoltage = strObj.BatteryVoltage;
            obj.RcCommandMode = strObj.RcCommandMode;
            obj.CommandInterfaceEnabled = strObj.CommandInterfaceEnabled;
            obj.FlightTime = strObj.FlightTime;
            obj.SystemUptime = strObj.SystemUptime;
            obj.CpuLoad = strObj.CpuLoad;
            obj.MotorStatus = strObj.MotorStatus;
            obj.InAir = strObj.InAir;
            obj.GpsStatus = strObj.GpsStatus;
            obj.GpsNumSatellites = strObj.GpsNumSatellites;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.VehicleName = obj.VehicleName;
            strObj.VehicleType = obj.VehicleType;
            strObj.BatteryVoltage = obj.BatteryVoltage;
            strObj.RcCommandMode = obj.RcCommandMode;
            strObj.CommandInterfaceEnabled = obj.CommandInterfaceEnabled;
            strObj.FlightTime = obj.FlightTime;
            strObj.SystemUptime = obj.SystemUptime;
            strObj.CpuLoad = obj.CpuLoad;
            strObj.MotorStatus = obj.MotorStatus;
            strObj.InAir = obj.InAir;
            strObj.GpsStatus = obj.GpsStatus;
            strObj.GpsNumSatellites = obj.GpsNumSatellites;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mav_msgs.Status.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mav_msgs.Status;
            obj.reload(strObj);
        end
    end
end
