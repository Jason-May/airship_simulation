classdef TorqueThrust < robotics.ros.Message
    %TorqueThrust MATLAB implementation of mav_msgs/TorqueThrust
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mav_msgs/TorqueThrust' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '81293743ae52683b61e39c21bc0b30db' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Torque
        Thrust
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Torque', [], 'Thrust', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'Thrust', 'Torque'} % List of non-constant message properties
        ROSPropertyList = {'header', 'thrust', 'torque'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = TorqueThrust(msg)
            %TorqueThrust Construct the message object TorqueThrust
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'TorqueThrust', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function torque = get.Torque(obj)
            %get.Torque Get the value for property Torque
            if isempty(obj.Cache.Torque)
                obj.Cache.Torque = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getTorque);
            end
            torque = obj.Cache.Torque;
        end
        
        function set.Torque(obj, torque)
            %set.Torque Set the value for property Torque
            validateattributes(torque, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'TorqueThrust', 'Torque');
            
            obj.JavaMessage.setTorque(torque.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Torque)
                obj.Cache.Torque.setJavaObject(torque.getJavaObject);
            end
        end
        
        function thrust = get.Thrust(obj)
            %get.Thrust Get the value for property Thrust
            if isempty(obj.Cache.Thrust)
                obj.Cache.Thrust = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getThrust);
            end
            thrust = obj.Cache.Thrust;
        end
        
        function set.Thrust(obj, thrust)
            %set.Thrust Set the value for property Thrust
            validateattributes(thrust, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'TorqueThrust', 'Thrust');
            
            obj.JavaMessage.setThrust(thrust.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Thrust)
                obj.Cache.Thrust.setJavaObject(thrust.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Torque = [];
            obj.Cache.Thrust = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Torque = copy(obj.Torque);
            cpObj.Thrust = copy(obj.Thrust);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Torque = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Torque);
            obj.Thrust = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Thrust);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Header = saveobj(obj.Header);
            strObj.Torque = saveobj(obj.Torque);
            strObj.Thrust = saveobj(obj.Thrust);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mav_msgs.TorqueThrust.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mav_msgs.TorqueThrust;
            obj.reload(strObj);
        end
    end
end
